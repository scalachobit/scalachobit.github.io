<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SCALA 手账</title>
  
  <subtitle>scala</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://scala.chobit.com/"/>
  <updated>2018-04-24T23:05:11.322Z</updated>
  <id>http://scala.chobit.com/</id>
  
  <author>
    <name>robin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>字符串和多行字符串</title>
    <link href="http://scala.chobit.com/wiki/20180425/a07-stringAndMultiLineString/"/>
    <id>http://scala.chobit.com/wiki/20180425/a07-stringAndMultiLineString/</id>
    <published>2018-04-24T22:38:43.000Z</published>
    <updated>2018-04-24T23:05:11.322Z</updated>
    
    <content type="html"><![CDATA[<p>scala中的字符串类就是java中的java.lang.String类。不过scala也为String提供了一个富封装类：scala.runtime.RichString。  </p><p>scala可以将java.lang.String类自动转换为scala.runtime.RichString类。这样就可以非常方便地使用capitalize()、lines()和reverse()等方法相对较便捷的方法。  </p><p>在scala里，对于字符串的支持中最显著的一个特性是对于heredoc的支持，也就是对多行文本的支持。在scala里创建多行字符串非常容易，只要将多行字符串放在三个双引号里就行。在下面的代码里创建了一个四行的字符串：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> info =</span><br><span class="line">  <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">     这里是robin的信息：</span></span><br><span class="line"><span class="string">          robin的姓名：robin zhang；</span></span><br><span class="line"><span class="string">          robin的年龄：29；</span></span><br><span class="line"><span class="string">          robin的个人主页：zhyea.com</span></span><br><span class="line"><span class="string">  "</span><span class="string">""</span></span><br><span class="line"></span><br><span class="line">println(info)</span><br></pre></td></tr></table></figure></p><p>scala会将三个双引号间的内容保持原样输出。所以这样声明的字符串也被称为原始字符串。需要注意一点：在原始字符串中使用转义字符也不会被转义，仍然会原样输出。在scala解释器中演示一下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; val info =</span><br><span class="line">     | <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">     |    My name is "</span>robin<span class="string">" \n</span></span><br><span class="line"><span class="string">     | Hello World!</span></span><br><span class="line"><span class="string">     | "</span><span class="string">""</span></span><br><span class="line">info: String =</span><br><span class="line"><span class="string">"</span></span><br><span class="line"><span class="string">   My name is "</span>robin<span class="string">" \n</span></span><br><span class="line"><span class="string">Hello World!</span></span><br><span class="line"><span class="string">"</span></span><br><span class="line"></span><br><span class="line">scala&gt; println(info)</span><br><span class="line"></span><br><span class="line">   My name is <span class="string">"robin"</span> \n</span><br><span class="line">Hello World!</span><br></pre></td></tr></table></figure></p><p>我在原始字符串中使用了空格缩进、双引号和转义字符“\n”，在输出的时候这些都原样保留下来了。  </p><p>RichString提供的方法中比较常用的是stripMargin。这个方法需要配合管道符“|”一起使用。如果管道符用在多行字符串每行的起始位置，stripMargin()方法会去掉先导管道符“|”前所有的空白或控制字符。如果出现在其他地方，而不是每行的开始，就会保留管道符。看个实例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; val info =</span><br><span class="line">     | <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">     |     |I'm trying to use method stripMargin.</span></span><br><span class="line"><span class="string">     | "</span><span class="string">""</span></span><br><span class="line">info: String =</span><br><span class="line"><span class="string">"</span></span><br><span class="line"><span class="string">I'm trying to use method stripMargin.</span></span><br><span class="line"><span class="string">"</span></span><br><span class="line"></span><br><span class="line">scala&gt; println(info.stripMargin)</span><br><span class="line"></span><br><span class="line">I<span class="string">'m trying to use method stripMargin.</span></span><br></pre></td></tr></table></figure></p><p>如果出于某种原因，管道符号“|”有特殊的用途，可以用stripMargin的重载方法来选择其他字符作为每行字符串的先导字符</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;scala中的字符串类就是java中的java.lang.String类。不过scala也为String提供了一个富封装类：scala.runtime.RichString。  &lt;/p&gt;
&lt;p&gt;scala可以将java.lang.String类自动转换为scala.runt
      
    
    </summary>
    
      <category term="scala学习" scheme="http://scala.chobit.com/categories/scala%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>var和val变量</title>
    <link href="http://scala.chobit.com/wiki/20180424/a06-varAndVal/"/>
    <id>http://scala.chobit.com/wiki/20180424/a06-varAndVal/</id>
    <published>2018-04-24T14:06:20.000Z</published>
    <updated>2018-04-24T22:35:58.868Z</updated>
    
    <content type="html"><![CDATA[<h2 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h2><p>前面我们提过，在scala中声明变量使用var和val都是可行的。  </p><p>用val声明的变量是不可变的，被初始化后值就固定下来，不可以再被修改（这类似于java中的final关键字）。用var声明的变量是可变的，可以任意修改。  </p><p>在scala解释器中声明变量实例如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; var myVar:String = <span class="string">"my var string"</span></span><br><span class="line">myVar: String = my var string</span><br><span class="line"></span><br><span class="line">scala&gt; myVar = <span class="string">"update my var"</span></span><br><span class="line">myVar: String = update my var</span><br><span class="line"></span><br><span class="line">scala&gt; val myVal:String = <span class="string">"my val string"</span></span><br><span class="line">myVal: String = my val string</span><br><span class="line"></span><br><span class="line">scala&gt; myVal = <span class="string">"update my val"</span></span><br><span class="line">&lt;console&gt;:12: error: reassignment to val</span><br><span class="line">       myVal = <span class="string">"update my val"</span></span><br></pre></td></tr></table></figure><p>可以看到修改var变量是没有问题的。修改val变量时报错了，因为val变量是不可变的。  </p><p>仍然要注意这里说的不可变是针对变量本身而言，而非变量所指向的实例。比如说如果定义了一个StringBuffer的val变量如val buffer = new StringBuffer()，那么变量buffer再执行诸如buffer.append(“robin”)这样的操作来修改buffer实例也是可行的。  </p><p>在scala编程中应尽量优先使用val。这可以提升不变性和函数式风格。</p><h2 id="变量类型声明"><a href="#变量类型声明" class="headerlink" title="变量类型声明"></a>变量类型声明</h2><p>前面我们在声明变量时都指定了变量类型：  </p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> myVal:<span class="type">String</span> = <span class="string">"my val string"</span></span><br></pre></td></tr></table></figure><p>不过在声明变量时，变量类型不是必需要指定的，像下面这样的写法也是完全没问题的：  </p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> myVal = <span class="string">"my val string"</span></span><br><span class="line"><span class="keyword">var</span> myInt = <span class="number">10</span></span><br></pre></td></tr></table></figure><p>声明变量时，如没有指定变量类型，scala也可以根据变量的初始值来推断出变量的类型。因此，声明变量时如没有指定变量类型，就必须为其指定初始值，不然就会报错：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; var myVar;</span><br><span class="line">&lt;console&gt;:1: error: <span class="string">'='</span> expected but <span class="string">';'</span> found.</span><br><span class="line">var myVar;</span><br></pre></td></tr></table></figure><h2 id="声明多个变量"><a href="#声明多个变量" class="headerlink" title="声明多个变量"></a>声明多个变量</h2><p>scala也支持一次声明多个变量，像下面这样：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">var</span> a, b = <span class="number">100</span></span><br><span class="line">a: <span class="type">Int</span> = <span class="number">100</span></span><br><span class="line">b: <span class="type">Int</span> = <span class="number">100</span></span><br></pre></td></tr></table></figure></p><p>示例代码中同时声明了a， b两个变量，并为这两个变量同时赋值为100。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;变量声明&quot;&gt;&lt;a href=&quot;#变量声明&quot; class=&quot;headerlink&quot; title=&quot;变量声明&quot;&gt;&lt;/a&gt;变量声明&lt;/h2&gt;&lt;p&gt;前面我们提过，在scala中声明变量使用var和val都是可行的。  &lt;/p&gt;
&lt;p&gt;用val声明的变量是不可变的，被初始化
      
    
    </summary>
    
      <category term="scala学习" scheme="http://scala.chobit.com/categories/scala%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>Scala中的运算符</title>
    <link href="http://scala.chobit.com/wiki/20180423/a05-operatorsInScala/"/>
    <id>http://scala.chobit.com/wiki/20180423/a05-operatorsInScala/</id>
    <published>2018-04-23T13:42:01.000Z</published>
    <updated>2018-04-25T14:26:51.420Z</updated>
    
    <content type="html"><![CDATA[<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>从语法上来说scala是没有运算符的。scala的运算符实际上是方法名，如1 + 2实际上就是1.+(2)。这些方法之所以能像运算符一样使用，是因为scala的一个特性：  </p><blockquote><p>如果方法的参数小于等于1个的话，那么“.”和括号就都是可选的  </p></blockquote><p>既然scala的运算符本质上是一个方法，那就说明我们可以自己实现或者重载这些所谓的运算符。下面的代码是一个复数做加法运算的示例，复数有实部和虚部，计算时需要分别处理：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Complex</span>(<span class="params">val real: <span class="type">Int</span>, val imaginary: <span class="type">Int</span></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">+</span></span>(operand: <span class="type">Complex</span>): <span class="type">Complex</span> = &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="type">Complex</span>(real + operand.real, imaginary + operand.imaginary)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">toString</span></span>(): <span class="type">String</span> = &#123;</span><br><span class="line">    real + (<span class="keyword">if</span> (imaginary &lt; <span class="number">0</span>) <span class="string">""</span> <span class="keyword">else</span> <span class="string">"+"</span>) + imaginary + <span class="string">"i"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> c1 = <span class="keyword">new</span> <span class="type">Complex</span>(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="keyword">val</span> c2 = <span class="keyword">new</span> <span class="type">Complex</span>(<span class="number">2</span>, <span class="number">-3</span>)</span><br><span class="line"><span class="keyword">val</span> sum = c1 + c2</span><br><span class="line"></span><br><span class="line">println(<span class="string">"("</span> + c1+ <span class="string">")+ ("</span> + c2 + <span class="string">")="</span> + sum)</span><br></pre></td></tr></table></figure></p><p>在代码的第一行创建了一个名为Complex的类、定义了一个有两个参数的构造器。  </p><p>在+方法里创建了一个新的Complex实例作为计算结果。结果的实部和虚部分别对应两个运算数实部和虚部之和。计算时c1+c2实际上就是c1.+(c2)。</p><p>看下上面程序的执行结果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(1+2i)+ (2-3i)=3-1i</span><br></pre></td></tr></table></figure></p><h2 id="运算符的优先级"><a href="#运算符的优先级" class="headerlink" title="运算符的优先级"></a>运算符的优先级</h2><p>既然scala中看起来像运算符的东西都是方法，那么和运算符相关的一些内容，比如算数优先级，scala是怎样处理的呢？  </p><p>scala中确实没有算数优先级、但是它定义了方法优先级：方法的优先级由方法名的第一个字符决定，如果表达式里有两个相同优先级的方法，那么左边的方法优先级更高。下面从低到高列出了scala中方法名首字符的优先级：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">|</span><br><span class="line">^</span><br><span class="line">&amp;</span><br><span class="line">&lt; &gt;</span><br><span class="line">=  !</span><br><span class="line">: </span><br><span class="line">+   - </span><br><span class="line">*  /  % </span><br><span class="line">所有其他特殊字符</span><br></pre></td></tr></table></figure><p>我们在之前的Complex类中再添加一个乘法运算来演示下scala运算符的优先级：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">*</span></span>(operand: <span class="type">Complex</span>): <span class="type">Complex</span> = &#123;</span><br><span class="line">  println(<span class="string">"Calling *"</span>)</span><br><span class="line">  <span class="keyword">new</span> <span class="type">Complex</span>(real * operand.real - imaginary * operand.imaginary, real * operand.imaginary + imaginary * operand.real)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>调用代码：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> c1 = <span class="keyword">new</span> <span class="type">Complex</span>(<span class="number">1</span>, <span class="number">4</span>)</span><br><span class="line"><span class="keyword">val</span> c2 = <span class="keyword">new</span> <span class="type">Complex</span>(<span class="number">2</span>, <span class="number">-3</span>)</span><br><span class="line"><span class="keyword">val</span> c3 = <span class="keyword">new</span> <span class="type">Complex</span>(<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">println(c1 + c2 * c3)</span><br></pre></td></tr></table></figure></p><p>执行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Calling *</span><br><span class="line">Calling +</span><br><span class="line">11+2i</span><br></pre></td></tr></table></figure></p><p>可以看到*()方法先被执行了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;运算符&quot;&gt;&lt;a href=&quot;#运算符&quot; class=&quot;headerlink&quot; title=&quot;运算符&quot;&gt;&lt;/a&gt;运算符&lt;/h2&gt;&lt;p&gt;从语法上来说scala是没有运算符的。scala的运算符实际上是方法名，如1 + 2实际上就是1.+(2)。这些方法之所以能像运算符
      
    
    </summary>
    
      <category term="scala学习" scheme="http://scala.chobit.com/categories/scala%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>基本类型</title>
    <link href="http://scala.chobit.com/wiki/20180423/a04-basicType/"/>
    <id>http://scala.chobit.com/wiki/20180423/a04-basicType/</id>
    <published>2018-04-22T22:46:39.000Z</published>
    <updated>2018-04-23T22:54:53.737Z</updated>
    
    <content type="html"><![CDATA[<p>先声明一点，scala中是没有基本数据类型的。在scala中一切都是对象。  </p><p>在Java中数据类型分为基本类型和引用类型。虽然在JDK1.5以后引入了自动装箱和自动拆箱机制，简化了一些基本类型和引用类型的转换问题。但是我们仍然会遇到一些问题：</p><ul><li>默认值的问题，“Intege i”和“int i”声明的整型数值的默认值是不同的；</li><li>泛型的问题，List&lt;int&gt;这样的写法在Java中是不允许的；</li><li>直接量是不可以调用对象方法的，如1.toString()在Java中就会报错。 </li></ul><p>在scala中不会有这样的问题。一开始就提过了：在scala中一切都是对象。比如1.toString()这样的写法在scala中是完全可以的。对应着Java的每个基本类型，scala都有一个封装类，包括Byte、Char、Short、Int、Long、Float、Double和Boolean。scala的封装类和Java的基本类型是可以直接转换的，比如下面这段代码：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScalaInt</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">playWithInt</span></span>() &#123;</span><br><span class="line"><span class="keyword">val</span> capacity: <span class="type">Int</span> = <span class="number">10</span></span><br><span class="line"><span class="keyword">val</span> list = <span class="keyword">new</span> java.util.<span class="type">ArrayList</span>[<span class="type">String</span>]  </span><br><span class="line">list.ensureCapacity(capacity)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在这段代码中首先声明了一个scala.Int类型的值capacity，而后调用java API创建了一个ArrayList实例。ArrayList实例的ensureCapacity方法参数类型是一个Java的整型值。但是，我们直接将scala.Int类型的值capacity传递过去也并没有报错。在这里scala.Int变量capacity被隐式转换为java直接类型的变量。  </p><p>值得一提的是，在封装类之外，scala还有一种富封装类。比如，稍后我们用到循环的时候，通常会有这样的写法：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i &lt;- <span class="number">1</span> to <span class="number">3</span>&gt;)&#123;</span><br><span class="line">    print(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>代码里有“1 to 3”或者说“1.to(3)”，其中的to方法不是scala.Int类型的方法，而是其对应的富封装类scala.runtime.RichInt中的方法。当scala推断出Int型的值1无法满足要求时就会调用它的intWrapper方法将其转为scala.runtime.RichInt类型，而后再调用它的to方法。  </p><p>在scala中直接量的封装类提供了算术运算方法，富封装类则封装了一些更常用的方法以方便开发使用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;先声明一点，scala中是没有基本数据类型的。在scala中一切都是对象。  &lt;/p&gt;
&lt;p&gt;在Java中数据类型分为基本类型和引用类型。虽然在JDK1.5以后引入了自动装箱和自动拆箱机制，简化了一些基本类型和引用类型的转换问题。但是我们仍然会遇到一些问题：&lt;/p&gt;
&lt;ul
      
    
    </summary>
    
      <category term="scala学习" scheme="http://scala.chobit.com/categories/scala%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>使用注释</title>
    <link href="http://scala.chobit.com/wiki/20180422/a03-comment/"/>
    <id>http://scala.chobit.com/wiki/20180422/a03-comment/</id>
    <published>2018-04-22T13:53:24.000Z</published>
    <updated>2018-04-22T14:16:37.662Z</updated>
    
    <content type="html"><![CDATA[<p>简单说下scala中的注释。scala的注释和java的注释是一样的，同样有多行注释和单行注释，使用方法也是一样的。  </p><p>这里是一段示例代码：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 这里是多行注释</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * 这里是main方法</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// 这里是单行注释</span></span><br><span class="line">    print(<span class="string">"Hello World!"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>就是这样，没有什么需要解释的地方。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;简单说下scala中的注释。scala的注释和java的注释是一样的，同样有多行注释和单行注释，使用方法也是一样的。  &lt;/p&gt;
&lt;p&gt;这里是一段示例代码：&lt;br&gt;&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;g
      
    
    </summary>
    
      <category term="scala学习" scheme="http://scala.chobit.com/categories/scala%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>快速体验Scala - 交互式编程</title>
    <link href="http://scala.chobit.com/wiki/20180421/a02-ineractiveCoding/"/>
    <id>http://scala.chobit.com/wiki/20180421/a02-ineractiveCoding/</id>
    <published>2018-04-21T12:14:21.000Z</published>
    <updated>2018-04-21T14:05:46.953Z</updated>
    
    <content type="html"><![CDATA[<p>scala提供的交互式解释器也是一种快速体验scala的一种方式。  </p><h2 id="使用交互式解释器"><a href="#使用交互式解释器" class="headerlink" title="使用交互式解释器"></a>使用交互式解释器</h2><p>在安装好scala开发环境后，打开命令行工具，输入scala就可以进入scala解释器：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">robin@robin-PC MINGW64 ~</span><br><span class="line">$ scala</span><br><span class="line">Welcome to Scala 2.11.8 (Java HotSpot(TM) 64-Bit Server VM, Java 1.8.0_25).</span><br><span class="line">Type <span class="keyword">in</span> expressions <span class="keyword">for</span> evaluation. Or try :<span class="built_in">help</span>.</span><br><span class="line"></span><br><span class="line">scala&gt;</span><br></pre></td></tr></table></figure></p><p>输入“:quit”或“:q”可以退出scala解释器。<br>接下来我们使用scala的交互式解释器来了解一些scala的基础概念。  </p><h2 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h2><p>scala的变量有两种类型：var和val。其中，val变量也可以称为常量，val定义的变量赋值后不可修改，类似于Java中final标记的变量。var变量可以随意赋值修改。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; val msg = <span class="string">"Hello World!"</span></span><br><span class="line">msg: String = Hello World!</span><br></pre></td></tr></table></figure></p><p>代码中声明了一个val变量msg。声明变量时没有显式指明类型，但是解释器也没有报错。scala是可以根据变量的值推断出变量的类型的。<br>当然也可以显式指明变量类型，像下面这样：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; val msg:String = <span class="string">"Hello World!"</span></span><br><span class="line">msg: String = Hello World!</span><br></pre></td></tr></table></figure></p><h2 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h2><p>在上一节我们已经在HelloWorld类中定义过一个main方法了，现在我们在交互式解释器中再定义一个新的函数:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; def hello(name:String)&#123;</span><br><span class="line">     | println(s<span class="string">"Hello <span class="variable">$name</span>!"</span>)</span><br><span class="line">     | println(<span class="string">"End"</span>)</span><br><span class="line">     | &#125;</span><br></pre></td></tr></table></figure></p><p>这里是在上一节定义的main函数：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]) = println(<span class="string">"Hello World!"</span>)</span><br></pre></td></tr></table></figure></p><p>我们比较一下这两个函数，可以看出scala函数定义的一些规则：  </p><ul><li>scala函数以def关键字定义</li><li>函数的参数列表中，参数名称和参数类型以“:”分隔 </li><li>方法体需要用花括号括起来，但是只有一行时，可以不使用花括号  </li><li>方法的返回类型可以不必声明</li><li>等号不是必需的</li></ul><p>大体上就是这样。scala函数定义的规则还有很多，这里只是管中窥豹，简单说下。  </p><p>另外，在上面的代码中我们可以看到每一行语句末尾都没有使用分号，这是scala和java一个很大的不同。在scala中，分号是可选的。若一行中只有一个语句，分号可以不填；若一行中有多个语句，分号则是必填。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;scala提供的交互式解释器也是一种快速体验scala的一种方式。  &lt;/p&gt;
&lt;h2 id=&quot;使用交互式解释器&quot;&gt;&lt;a href=&quot;#使用交互式解释器&quot; class=&quot;headerlink&quot; title=&quot;使用交互式解释器&quot;&gt;&lt;/a&gt;使用交互式解释器&lt;/h2&gt;&lt;p&gt;在安装
      
    
    </summary>
    
      <category term="scala学习" scheme="http://scala.chobit.com/categories/scala%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>快速体验Scala - Scasite</title>
    <link href="http://scala.chobit.com/wiki/20180421/a01-quickStart/"/>
    <id>http://scala.chobit.com/wiki/20180421/a01-quickStart/</id>
    <published>2018-04-21T08:06:42.000Z</published>
    <updated>2018-04-21T13:45:47.498Z</updated>
    
    <content type="html"><![CDATA[<p>前面一节简略说了Scala开发环境的准备工作。如果还没有安装Scala的开发环境，也可以快速在<a href="https://scastie.scala-lang.org" title="Scasite" rel="external nofollow noopener noreferrer" target="_blank">Scasite</a>上快速体验一下。  </p><p>还是按传统，来一个HelloWorld：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">HelloWorld</span> </span>&#123;  </span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]) = println(<span class="string">"Hello World!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这段代码中我们使用object关键字声明了一个结构：HelloWorld。之所以用“结构”这个词，是因为在没有上下文的情况下要描述清楚scala的object需要费些力气。不过可以用Java的一些概念来勉强描述下：scala的object相当于Java中的一个没有构造器，只有静态方法的final类。</p><p>再来看一下这个object里定义方法的形式：声明方法使用了def关键字，然后是方法名，方法名之后的括号中是参数列表，参数列表后一个等号紧跟着方法体。因为方法体只有一行，所以就没有用花括号括起来。参数列表中参数名和参数类型用冒号分隔，参数名在前。</p><p>打开<a href="https://scastie.scala-lang.org" title="Scasite" rel="external nofollow noopener noreferrer" target="_blank">Scasite</a>。将这段代码放在Scasite的编辑框里，点击Run按钮执行。可以看到在下方的Console中输出了Hello Word！。<br>不过同时还出现了一行提示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You don&apos;t need a main method (or extends Scastie) in Worksheet Mode</span><br></pre></td></tr></table></figure></p><p>说实话，我不太清楚Scasite的Worksheet Mode是什么意思。不过这提醒我了：Scala也是一种脚本语言。所以我们可以直接在Scasite的编辑框里输入下面的代码：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">println(<span class="string">"Hello World!"</span>)</span><br></pre></td></tr></table></figure></p><p>点击Run按钮执行，结果与之前一样。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前面一节简略说了Scala开发环境的准备工作。如果还没有安装Scala的开发环境，也可以快速在&lt;a href=&quot;https://scastie.scala-lang.org&quot; title=&quot;Scasite&quot; rel=&quot;external nofollow noopener n
      
    
    </summary>
    
      <category term="scala学习" scheme="http://scala.chobit.com/categories/scala%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>scala手账 - 主页</title>
    <link href="http://scala.chobit.com/wiki/20180421/index/"/>
    <id>http://scala.chobit.com/wiki/20180421/index/</id>
    <published>2018-04-21T03:45:57.000Z</published>
    <updated>2018-04-25T14:27:07.602Z</updated>
    
    <content type="html"><![CDATA[<p>scala学习：</p><ol><li><a href="https://scala.chobit.org/wiki/20180419/a00-prepareEnv/" target="_blank" rel="noopener">准备开发环境</a>  </li><li><a href="https://scala.chobit.org/wiki/20180421/a01-quickStart/" target="_blank" rel="noopener">快速体验scala - Scasite</a></li><li><a href="https://scala.chobit.org/wiki/20180421/a02-ineractiveCoding/" target="_blank" rel="noopener">快速体验scala - 交互式编程</a></li><li><a href="https://scala.chobit.org/wiki/20180422/a03-comment/" target="_blank" rel="noopener">使用注释</a></li><li><a href="https://scala.chobit.org/wiki/20180423/a04-basicType/" target="_blank" rel="noopener">基本类型</a></li><li><a href="https://scala.chobit.org/wiki/20180424/a06-varAndVal/" target="_blank" rel="noopener">val和var变量</a></li><li><a href="https://scala.chobit.org/wiki/20180424/a07-stringAndMultiLineString/" target="_blank" rel="noopener">字符串和多行字符串</a></li></ol><p>This is Home Page.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;scala学习：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://scala.chobit.org/wiki/20180419/a00-prepareEnv/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;准备开发环境&lt;/a&gt;  &lt;/li&gt;
&lt;
      
    
    </summary>
    
    
      <category term="scala学习" scheme="http://scala.chobit.com/tags/scala%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>准备开发环境</title>
    <link href="http://scala.chobit.com/wiki/20180419/a00-prepareEnv/"/>
    <id>http://scala.chobit.com/wiki/20180419/a00-prepareEnv/</id>
    <published>2018-04-19T14:04:33.000Z</published>
    <updated>2018-04-21T13:46:09.577Z</updated>
    
    <content type="html"><![CDATA[<p>Scala开发环境准备步骤如下：  </p><ul><li>安装JDK环境，建议选择JDK8版本</li><li>安装Scala开发环境，选择最新版就行</li></ul><p>聊作解释：建议JDK选择1.8是因为稍后会用到Gradle，Gradle对JDK9的兼容性目前并不好。不过，稍后许有调整也未可知。  </p><p>IDE可以选择IntelliJ Idea， Eclipse的Scala IDE也未尝不可。我是颜控党，所以选择了IDEA。  </p><p>关于环境就简单说这点儿。简单说下这次的学习计划：争取每天学习一个Scala的特性，间或会引入一些java的内容。  </p><p>在这里立一个Flag。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Scala开发环境准备步骤如下：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安装JDK环境，建议选择JDK8版本&lt;/li&gt;
&lt;li&gt;安装Scala开发环境，选择最新版就行&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;聊作解释：建议JDK选择1.8是因为稍后会用到Gradle，Gradle对JDK9的兼
      
    
    </summary>
    
      <category term="scala学习" scheme="http://scala.chobit.com/categories/scala%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="准备" scheme="http://scala.chobit.com/tags/%E5%87%86%E5%A4%87/"/>
    
  </entry>
  
</feed>
