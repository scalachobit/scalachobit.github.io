{"pages":[{"title":"Categories","date":"2018-04-17T15:04:45.227Z","path":"categories/index.html","text":""},{"title":"About","date":"2018-04-17T15:04:45.226Z","path":"about/index.html","text":""},{"title":"Tags","date":"2018-04-17T15:04:45.229Z","path":"tags/index.html","text":""}],"posts":[{"title":"基本类型","date":"2018-04-22T22:46:39.000Z","path":"wiki/20180423/04-basicType/","text":"先声明一点，scala中是没有基本数据类型的。在scala中一切都是对象。 在Java中数据类型分为基本类型和引用类型。虽然在JDK1.5以后引入了自动装箱和自动拆箱机制，简化了一些基本类型和引用类型的转换问题。但是我们仍然会遇到一些问题： 默认值的问题，“Intege i”和“int i”声明的整型数值的默认值是不同的； 泛型的问题，List这样的写法在Java中是不允许的； 直接量是不可以调用对象方法的，如1.toString()在Java中就会报错。 在scala中不会有这样的问题。一开始就提过了：在scala中一切都是对象。比如1.toString()这样的写法在scala中是完全可以的。对应着Java的每个基本类型，scala都有一个封装类，包括Byte、Char、Short、Int、Long、Float、Double和Boolean。scala的封装类和Java的基本类型是可以直接转换的，比如下面这段代码：1234567class ScalaInt &#123; def playWithInt() &#123; val capacity: Int = 10 val list = new java.util.ArrayList[String] list.ensureCapacity(capacity) &#125;&#125; 在这段代码中首先声明了一个scala.Int类型的值capacity，而后调用java API创建了一个ArrayList实例。ArrayList实例的ensureCapacity方法参数类型是一个Java的整型值。但是，我们直接将scala.Int类型的值capacity传递过去也并没有报错。在这里scala.Int变量capacity被隐式转换为java直接类型的变量。 值得一提的是，在封装类之外，scala还有一种富封装类。比如，稍后我们用到循环的时候，可能会有这样的写法：123for(i &lt;- 1 to 3&gt;)&#123; print(i)&#125; 代码里有“1 to 3”或者说“1.to(3)”，其中的to方法不是scala.Int类型的方法，而是其对应的富封装类scala.runtime.RichInt中的方法。当scala推断出Int型的值1无法满足要求时就会调用它的intWrapper方法将其转为scala.runtime.RichInt类型，而后再调用它的to方法。 在scala中直接量的封装类提供了算术运算方法，富封装类则封装了一些更常用的方法以方便开发使用。","tags":[],"categories":[{"name":"scala学习","slug":"scala学习","permalink":"http://scala.chobit.com/categories/scala学习/"}]},{"title":"使用注释","date":"2018-04-22T13:53:24.000Z","path":"wiki/20180422/03-comment/","text":"简单说下scala中的注释。scala的注释和java的注释是一样的，同样有多行注释和单行注释，使用方法也是一样的。 这里是一段示例代码：12345678910111213object HelloWorld &#123; /** * 这里是多行注释 * * 这里是main方法 */ def main(args: Array[String]): Unit = &#123; // 这里是单行注释 print(\"Hello World!\") &#125; &#125; 就是这样，没有什么需要解释的地方。","tags":[],"categories":[{"name":"scala学习","slug":"scala学习","permalink":"http://scala.chobit.com/categories/scala学习/"}]},{"title":"快速体验Scala - 交互式编程","date":"2018-04-21T12:14:21.000Z","path":"wiki/20180421/02-ineractiveCoding/","text":"scala提供的交互式解释器也是一种快速体验scala的一种方式。 使用交互式解释器在安装好scala开发环境后，打开命令行工具，输入scala就可以进入scala解释器：123456robin@robin-PC MINGW64 ~$ scalaWelcome to Scala 2.11.8 (Java HotSpot(TM) 64-Bit Server VM, Java 1.8.0_25).Type in expressions for evaluation. Or try :help.scala&gt; 输入“:quit”或“:q”可以退出scala解释器。接下来我们使用scala的交互式解释器来了解一些scala的基础概念。 定义变量scala的变量有两种类型：var和val。其中，val变量也可以称为常量，val定义的变量赋值后不可修改，类似于Java中final标记的变量。var变量可以随意赋值修改。12scala&gt; val msg = \"Hello World!\"msg: String = Hello World! 代码中声明了一个val变量msg。声明变量时没有显式指明类型，但是解释器也没有报错。scala是可以根据变量的值推断出变量的类型的。当然也可以显式指明变量类型，像下面这样：12scala&gt; val msg:String = \"Hello World!\"msg: String = Hello World! 定义函数在上一节我们已经在HelloWorld类中定义过一个main方法了，现在我们在交互式解释器中再定义一个新的函数:1234scala&gt; def hello(name:String)&#123; | println(s\"Hello $name!\") | println(\"End\") | &#125; 这里是在上一节定义的main函数：1def main(args: Array[String]) = println(\"Hello World!\") 我们比较一下这两个函数，可以看出scala函数定义的一些规则： scala函数以def关键字定义 函数的参数列表中，参数名称和参数类型以“:”分隔 方法体需要用花括号括起来，但是只有一行时，可以不使用花括号 方法的返回类型可以不必声明 等号不是必需的 大体上就是这样。scala函数定义的规则还有很多，这里只是管中窥豹，简单说下。 另外，在上面的代码中我们可以看到每一行语句末尾都没有使用分号，这是scala和java一个很大的不同。在scala中，分号是可选的。若一行中只有一个语句，分号可以不填；若一行中有多个语句，分号则是必填。","tags":[],"categories":[{"name":"scala学习","slug":"scala学习","permalink":"http://scala.chobit.com/categories/scala学习/"}]},{"title":"快速体验Scala - Scasite","date":"2018-04-21T08:06:42.000Z","path":"wiki/20180421/01-quickStart/","text":"前面一节简略说了Scala开发环境的准备工作。如果还没有安装Scala的开发环境，也可以快速在Scasite上快速体验一下。 还是按传统，来一个HelloWorld：123object HelloWorld &#123; def main(args: Array[String]) = println(\"Hello World!\")&#125; 这段代码中我们使用object关键字声明了一个结构：HelloWorld。之所以用“结构”这个词，是因为在没有上下文的情况下要描述清楚scala的object需要费些力气。不过可以用Java的一些概念来勉强描述下：scala的object相当于Java中的一个没有构造器，只有静态方法的final类。 再来看一下这个object里定义方法的形式：声明方法使用了def关键字，然后是方法名，方法名之后的括号中是参数列表，参数列表后一个等号紧跟着方法体。因为方法体只有一行，所以就没有用花括号括起来。参数列表中参数名和参数类型用冒号分隔，参数名在前。 打开Scasite。将这段代码放在Scasite的编辑框里，点击Run按钮执行。可以看到在下方的Console中输出了Hello Word！。不过同时还出现了一行提示：1You don&apos;t need a main method (or extends Scastie) in Worksheet Mode 说实话，我不太清楚Scasite的Worksheet Mode是什么意思。不过这提醒我了：Scala也是一种脚本语言。所以我们可以直接在Scasite的编辑框里输入下面的代码：1println(\"Hello World!\") 点击Run按钮执行，结果与之前一样。","tags":[],"categories":[{"name":"scala学习","slug":"scala学习","permalink":"http://scala.chobit.com/categories/scala学习/"}]},{"title":"scala手账 - 主页","date":"2018-04-21T03:45:57.000Z","path":"wiki/20180421/index/","text":"scala学习： 准备开发环境 快速体验scala - Scasite 快速体验scala - 交互式编程 使用注释 基本类型 This is Home Page.","tags":[{"name":"scala学习","slug":"scala学习","permalink":"http://scala.chobit.com/tags/scala学习/"}],"categories":[]},{"title":"准备开发环境","date":"2018-04-19T14:04:33.000Z","path":"wiki/20180419/00-prepareEnv/","text":"Scala开发环境准备步骤如下： 安装JDK环境，建议选择JDK8版本 安装Scala开发环境，选择最新版就行 聊作解释：建议JDK选择1.8是因为稍后会用到Gradle，Gradle对JDK9的兼容性目前并不好。不过，稍后许有调整也未可知。 IDE可以选择IntelliJ Idea， Eclipse的Scala IDE也未尝不可。我是颜控党，所以选择了IDEA。 关于环境就简单说这点儿。简单说下这次的学习计划：争取每天学习一个Scala的特性，间或会引入一些java的内容。 在这里立一个Flag。","tags":[{"name":"准备","slug":"准备","permalink":"http://scala.chobit.com/tags/准备/"}],"categories":[{"name":"scala学习","slug":"scala学习","permalink":"http://scala.chobit.com/categories/scala学习/"}]}]}